import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';

import { TaskModel } from './models/task';
import { SessionModel } from './models/session';
import { ConfigModel } from './models/config';
import { setupAuthRoutes, authenticateToken } from './auth';
import { ProjectModel } from './models/project';
import { chat } from './services/geminiService';

export function setupAPI() {
  const app = express();
  const port = process.env.API_PORT || 3000;

  app.use(cors());
  app.use(bodyParser.json());

  // Setup authentication routes
  setupAuthRoutes(app);

  // Middleware to protect routes (apply to all routes except auth)
  app.use('/api/tasks', authenticateToken);
  app.use('/api/sessions', authenticateToken);
  app.use('/api/config', authenticateToken);
  app.use('/api/projects', authenticateToken);

  // AI chat endpoint
  app.post('/api/ai/chat', authenticateToken, async (req, res) => {
    try {
      const { model, contents, generationConfig } = req.body;
      const result = await chat({ model, contents, generationConfig });
      res.json(result);
    } catch (error) {
      console.error('Error chatting with AI:', error);
      res.status(500).json({ message: 'Failed to chat with AI' });
    }
  });

  // AI suggest endpoint - ƒê·ªÅ xu·∫•t ∆∞u ti√™n c√¥ng vi·ªác
  app.post('/api/ai/suggest', authenticateToken, async (req, res) => {
    try {
      const userId = (req as any).userId;
      const userTasks = await TaskModel.find({ userId }).sort({ deadline: 1 });
      
      // T√≠nh ƒëi·ªÉm ∆∞u ti√™n cho m·ªói task
      const prioritizedTasks = userTasks.map(task => {
        let priorityScore = 0;
        
        // ∆Øu ti√™n theo deadline
        if (task.deadline) {
          const deadline = new Date(task.deadline);
          const today = new Date();
          const daysLeft = Math.ceil((deadline.getTime() - today.getTime()) / (1000 * 3600 * 24));
          
          if (daysLeft <= 0) priorityScore += 10; // Qu√° h·∫°n
          else if (daysLeft <= 1) priorityScore += 8; // C√≤n 1 ng√†y
          else if (daysLeft <= 3) priorityScore += 6; // C√≤n 3 ng√†y
          else if (daysLeft <= 7) priorityScore += 4; // C√≤n 1 tu·∫ßn
          else priorityScore += 2; // C√≤n nhi·ªÅu th·ªùi gian
        }
        
        // ∆Øu ti√™n theo priority field n·∫øu c√≥
        if (task.priority) {
          priorityScore += task.priority;
        }
        
        // Status (todo > in-progress > done)
        if (task.status === 'todo') priorityScore += 3;
        else if (task.status === 'in-progress') priorityScore += 2;
        else if (task.status === 'done') priorityScore -= 5; // Gi·∫£m ƒëi·ªÉm cho task ƒë√£ ho√†n th√†nh
        
        return {
          ...task.toObject(),
          priorityScore
        };
      });
      
      // S·∫Øp x·∫øp theo ƒëi·ªÉm ∆∞u ti√™n
      prioritizedTasks.sort((a, b) => b.priorityScore - a.priorityScore);
      
      res.json({ tasks: prioritizedTasks });
    } catch (error) {
      console.error('Error suggesting tasks:', error);
      res.status(500).json({ message: 'Failed to suggest tasks' });
    }
  });

  // AI analysis endpoint - Ph√¢n t√≠ch hi·ªáu su·∫•t ng∆∞·ªùi d√πng
  app.post('/api/ai/analyze', authenticateToken, async (req, res) => {
    try {
      const userId = (req as any).userId;
      const [tasks, sessions, projects] = await Promise.all([
        TaskModel.find({ userId }),
        SessionModel.find({ userId }),
        ProjectModel.find({ userId })
      ]);

      const completedTasks = tasks.filter(t => t.status === 'done').length;
      const totalTasks = tasks.length;
      const completionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
      
      const focusSessions = sessions.filter(s => s.type === 'focus');
      const totalFocusTime = focusSessions.reduce((total, s) => total + (s.duration || 0), 0);
      
      const activeProjects = projects.filter(p => !p.completed).length;
      const completedProjects = projects.filter(p => p.completed).length;

      // T·∫°o ph√¢n t√≠ch b·∫±ng AI
      const analysisPrompt = `
Ph√¢n t√≠ch hi·ªáu su·∫•t l√†m vi·ªác c·ªßa ng∆∞·ªùi d√πng:

Th·ªëng k√™:
- T·ªïng s·ªë task: ${totalTasks}
- Task ho√†n th√†nh: ${completedTasks}
- T·ª∑ l·ªá ho√†n th√†nh: ${completionRate.toFixed(1)}%
- D·ª± √°n ƒëang th·ª±c hi·ªán: ${activeProjects}
- D·ª± √°n ho√†n th√†nh: ${completedProjects}
- T·ªïng th·ªùi gian t·∫≠p trung: ${Math.round(totalFocusTime / 60)} ph√∫t
- S·ªë phi√™n Pomodoro: ${focusSessions.length}

H√£y ƒë∆∞a ra:
1. ƒê√°nh gi√° t·ªïng quan v·ªÅ hi·ªáu su·∫•t
2. ƒêi·ªÉm m·∫°nh ƒë√£ th·ªÉ hi·ªán
3. Nh·ªØng ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán
4. G·ª£i √Ω c·ª• th·ªÉ ƒë·ªÉ n√¢ng cao hi·ªáu qu·∫£
5. L·ªùi ƒë·ªông vi√™n t√≠ch c·ª±c

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† c√≥ c·∫•u tr√∫c r√µ r√†ng.
`;

      const aiResponse = await chat({
        model: 'gemini-2.0-flash',
        contents: analysisPrompt
      });

      res.json({
        stats: {
          totalTasks,
          completedTasks,
          completionRate,
          activeProjects,
          completedProjects,
          totalFocusTime: Math.round(totalFocusTime / 60),
          totalSessions: focusSessions.length
        },
        analysis: aiResponse.text,
        recommendations: [
          completionRate < 50 ? 'T·∫≠p trung ho√†n th√†nh c√°c task ƒë√£ t·∫°o' : null,
          activeProjects > 5 ? 'Gi·∫£m s·ªë d·ª± √°n ƒëang th·ª±c hi·ªán' : null,
          focusSessions.length < 10 ? 'TƒÉng c∆∞·ªùng s·ª≠ d·ª•ng Pomodoro' : null
        ].filter(Boolean)
      });
    } catch (error) {
      console.error('Error analyzing performance:', error);
      res.status(500).json({ message: 'Failed to analyze performance' });
    }
  });

  // AI encouragement endpoint - ƒê·ªông vi√™n khi ho√†n th√†nh task
  app.post('/api/ai/encourage', authenticateToken, async (req, res) => {
    try {
      const userId = (req as any).userId;
      const { taskId } = req.body;
      
      const task = await TaskModel.findOne({ _id: taskId, userId });
      if (!task) {
        return res.status(404).json({ message: 'Task not found' });
      }

      const project = await ProjectModel.findById(task.projectId);
      const userTasks = await TaskModel.find({ userId });
      const completedTasks = userTasks.filter(t => t.status === 'done').length;
      const sessions = await SessionModel.find({ userId, type: 'focus' });

      const encouragementPrompt = `
Ng∆∞·ªùi d√πng v·ª´a ho√†n th√†nh task: "${task.title}"
Thu·ªôc d·ª± √°n: "${project?.name || 'Unknown'}"

Th·ªëng k√™ hi·ªán t·∫°i:
- T·ªïng task ho√†n th√†nh: ${completedTasks}
- T·ªïng phi√™n Pomodoro: ${sessions.length}
- M√¥ t·∫£ task: ${task.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}

H√£y t·∫°o l·ªùi ƒë·ªông vi√™n bao g·ªìm:
1. L·ªùi ch√∫c m·ª´ng nhi·ªát t√¨nh v√† c·ª• th·ªÉ
2. Nh·∫≠n x√©t v·ªÅ th√†nh t√≠ch (n·∫øu ƒë√°ng ch√∫ √Ω)
3. ƒê·ªông l·ª±c cho b∆∞·ªõc ti·∫øp theo
4. Emoji ph√π h·ª£p ƒë·ªÉ t·∫°o kh√¥ng kh√≠ t√≠ch c·ª±c

Tr·∫£ l·ªùi ng·∫Øn g·ªçn, t√≠ch c·ª±c v√† c√° nh√¢n h√≥a.
`;

      const aiResponse = await chat({
        model: 'gemini-2.0-flash',
        contents: encouragementPrompt
      });

      res.json({
        message: aiResponse.text,
        achievement: completedTasks % 5 === 0 ? `Milestone: ${completedTasks} tasks completed!` : null
      });
    } catch (error) {
      console.error('Error generating encouragement:', error);
      res.status(500).json({ 
        message: 'üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh task! Ti·∫øp t·ª•c ph√°t huy nh√©!' 
      });
    }
  });

  // Tasks CRUD
  app.get('/api/tasks', async (req, res) => {
    try {
      const userId = (req as any).userId;
      const projectId = req.query.projectId as string | undefined;
      const filter: any = { userId };
      if (projectId) filter.projectId = projectId;
      const tasks = await TaskModel.find(filter).sort({ createdAt: -1 });
      res.json(tasks);
    } catch (error) {
      console.error('Error fetching tasks:', error);
      res.status(500).json({ message: 'Failed to fetch tasks' });
    }
  });

  app.post('/api/tasks', async (req, res) => {
    try {
      const userId = (req as any).userId;
      const taskData = { ...req.body, userId };
      if (!taskData.projectId) {
        return res.status(400).json({ message: 'projectId is required' });
      }
      const task = new TaskModel(taskData);
      await task.save();
      res.json(task);
    } catch (error) {
      console.error('Error creating task:', error);
      res.status(500).json({ message: 'Failed to create task' });
    }
  });

  app.put('/api/tasks/:id', async (req, res) => {
    try {
      const userId = (req as any).userId;
      const task = await TaskModel.findOneAndUpdate(
        { _id: req.params.id, userId },
        req.body,
        { new: true }
      );
      if (!task) {
        return res.status(404).json({ message: 'Task not found' });
      }

      // N·∫øu task ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh, t·∫°o ƒë·ªông vi√™n
      if (req.body.status === 'done') {
        try {
          const encouragementResponse = await fetch(`http://localhost:${port}/api/ai/encourage`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': req.headers.authorization || ''
            },
            body: JSON.stringify({ taskId: task._id })
          });
          
          if (encouragementResponse.ok) {
            const encouragement = await encouragementResponse.json();
            // C√≥ th·ªÉ g·ª≠i notification ho·∫∑c l∆∞u v√†o database
            console.log('Encouragement generated:', encouragement.message);
          }
        } catch (error) {
          console.error('Failed to generate encouragement:', error);
        }
      }

      res.json(task);
    } catch (error) {
      console.error('Error updating task:', error);
      res.status(500).json({ message: 'Failed to update task' });
    }
  });

  app.delete('/api/tasks/:id', async (req, res) => {
    try {
      const userId = (req as any).userId;
      const task = await TaskModel.findOneAndDelete({ _id: req.params.id, userId });
      if (!task) {
        return res.status(404).json({ message: 'Task not found' });
      }
      res.json({ success: true });
    } catch (error) {
      console.error('Error deleting task:', error);
      res.status(500).json({ message: 'Failed to delete task' });
    }
  });

  // Sessions
  app.get('/api/sessions', async (req, res) => {
    try {
      const userId = (req as any).userId;
      const sessions = await SessionModel.find({ userId }).sort({ startTime: -1 });
      res.json(sessions);
    } catch (error) {
      console.error('Error fetching sessions:', error);
      res.status(500).json({ message: 'Failed to fetch sessions' });
    }
  });

  app.post('/api/sessions', async (req, res) => {
    try {
      const userId = (req as any).userId;
      const session = new SessionModel({ ...req.body, userId });
      await session.save();
      res.json(session);
    } catch (error) {
      console.error('Error creating session:', error);
      res.status(500).json({ message: 'Failed to create session' });
    }
  });

  // Config
  app.get('/api/config', async (req, res) => {
    try {
      const userId = (req as any).userId;
      let config = await ConfigModel.findOne({ userId });
      if (!config) {
        config = new ConfigModel({ userId });
        await config.save();
      }
      res.json(config);
    } catch (error) {
      console.error('Error fetching config:', error);
      res.status(500).json({ message: 'Failed to fetch config' });
    }
  });

  app.post('/api/config', async (req, res) => {
    try {
      const userId = (req as any).userId;
      let config = await ConfigModel.findOne({ userId });
      if (config) {
        Object.assign(config, req.body);
        await config.save();
      } else {
        config = new ConfigModel({ ...req.body, userId });
        await config.save();
      }
      res.json(config);
    } catch (error) {
      console.error('Error updating config:', error);
      res.status(500).json({ message: 'Failed to update config' });
    }
  });

  // Projects CRUD
  app.get('/api/projects', async (req, res) => {
    try {
      const userId = (req as any).userId;
      const projects = await ProjectModel.find({ userId }).sort({ createdAt: -1 });
      res.json(projects);
    } catch (error) {
      console.error('Error fetching projects:', error);
      res.status(500).json({ message: 'Failed to fetch projects' });
    }
  });

  app.post('/api/projects', async (req, res) => {
    try {
      const userId = (req as any).userId;
      const { name } = req.body;
      if (!name) {
        return res.status(400).json({ message: 'Project name is required' });
      }
      const project = new ProjectModel({ name, userId });
      await project.save();
      res.status(201).json(project);
    } catch (error) {
      console.error('Error creating project:', error);
      res.status(500).json({ message: 'Failed to create project' });
    }
  });

  app.put('/api/projects/:id', async (req, res) => {
    try {
      const userId = (req as any).userId;
      // Cho ph√©p c·∫≠p nh·∫≠t name, completed v√† status
      const updateData: any = {};
      if (req.body.name !== undefined) updateData.name = req.body.name;
      if (req.body.completed !== undefined) updateData.completed = req.body.completed;
      if (req.body.status !== undefined) updateData.status = req.body.status;
      const project = await ProjectModel.findOneAndUpdate(
        { _id: req.params.id, userId },
        updateData,
        { new: true }
      );
      if (!project) {
        return res.status(404).json({ message: 'Project not found' });
      }
      res.json(project);
    } catch (error) {
      console.error('Error updating project:', error);
      res.status(500).json({ message: 'Failed to update project' });
    }
  });

  app.delete('/api/projects/:id', async (req, res) => {
    try {
      const userId = (req as any).userId;
      const project = await ProjectModel.findOneAndDelete({ _id: req.params.id, userId });
      if (!project) {
        return res.status(404).json({ message: 'Project not found' });
      }
      // X√≥a c√°c task thu·ªôc project n√†y
      await TaskModel.deleteMany({ projectId: project._id });
      res.json({ success: true });
    } catch (error) {
      console.error('Error deleting project:', error);
      res.status(500).json({ message: 'Failed to delete project' });
    }
  });

  app.listen(port, () => {
    console.log(`üåê API server listening on http://localhost:${port}`);
  });
}